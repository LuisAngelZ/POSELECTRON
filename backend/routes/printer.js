// server/routes/printer.js - VERSI√ìN CORREGIDA
const express = require('express');
const router = express.Router();
const printer = require('../utils/printer');

// Importar middleware de autenticaci√≥n - CORREGIDO
// Cambiar seg√∫n tu estructura de archivos:
let authenticateToken;

try {
    // Opci√≥n 1: Si es un objeto con la funci√≥n
    const auth = require('../middleware/auth');
    authenticateToken = auth.authenticateToken || auth;
} catch (error1) {
    try {
        // Opci√≥n 2: Si est√° en routes/auth.js
        const auth = require('./auth');
        authenticateToken = auth.authenticateToken || auth;
    } catch (error2) {
        // Opci√≥n 3: Middleware simple si no existe
        console.warn('‚ö†Ô∏è Middleware de autenticaci√≥n no encontrado, usando middleware b√°sico');
        authenticateToken = (req, res, next) => next(); // Middleware que permite pasar
    }
}

// Ruta: GET /api/printer/status
router.get('/status', authenticateToken, async (req, res) => {
    try {
        const status = await printer.checkPrinterStatus();
        res.json({
            success: true,
            printer_status: status
        });
    } catch (error) {
        console.error('Error verificando estado de impresora:', error);
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// Ruta: POST /api/printer/test
router.post('/test', authenticateToken, async (req, res) => {
    try {
        console.log('üß™ Iniciando test de impresora...');
        const result = await printer.printTestTicket();
        console.log('‚úÖ Test de impresora completado');
        res.json(result);
    } catch (error) {
        console.error('‚ùå Error en test de impresora:', error);
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// NUEVA RUTA: POST /api/printer/print-sale (IMPRESI√ìN AUTOM√ÅTICA)
router.post('/print-sale', authenticateToken, async (req, res) => {
    try {
        const { sale_data } = req.body;
        
        if (!sale_data) {
            return res.status(400).json({
                success: false,
                message: 'Datos de venta requeridos para impresi√≥n'
            });
        }

        console.log('üñ®Ô∏è Iniciando impresi√≥n autom√°tica de venta #', sale_data.id);

        // Imprimir usando el printer.js modificado
        const result = await printer.printSaleTicket(sale_data);
        
        console.log('‚úÖ Impresi√≥n autom√°tica exitosa para venta #', sale_data.id);
        
        res.json({
            success: true,
            message: 'Ticket de venta impreso autom√°ticamente',
            printer_status: result
        });
        
    } catch (error) {
        console.error('‚ùå Error en impresi√≥n autom√°tica:', error);
        res.status(500).json({
            success: false,
            message: `Error en impresi√≥n: ${error.message}`
        });
    }
});

// Ruta: POST /api/printer/reprint-last
router.post('/reprint-last', authenticateToken, async (req, res) => {
    try {
        // Por ahora respuesta b√°sica - puedes implementar l√≥gica para √∫ltima venta
        console.log('üîÑ Solicitud de reimpresi√≥n de √∫ltimo ticket');
        res.json({
            success: false,
            message: 'Funci√≥n de reimpresi√≥n no implementada a√∫n'
        });
    } catch (error) {
        console.error('‚ùå Error en reimpresi√≥n:', error);
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

// Ruta: POST /api/printer/configure
router.post('/configure', authenticateToken, async (req, res) => {
    try {
        const { printerName, thermalWidth } = req.body;
        
        console.log('‚öôÔ∏è Configurando impresora:', { printerName, thermalWidth });
        
        const result = await printer.configurePrinter({
            printerName,
            thermalWidth
        });
        
        console.log('‚úÖ Impresora reconfigurada');
        res.json(result);
    } catch (error) {
        console.error('‚ùå Error configurando impresora:', error);
        res.status(500).json({
            success: false,
            message: error.message
        });
    }
});

module.exports = router;